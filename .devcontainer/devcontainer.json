// For format details, see https://containers.dev/implementors/json_reference/
{
    "name": "Golang Developer Container",
    "build": {
        "dockerfile": "Dockerfile",
    },
    "remoteEnv": {
        "DISPLAY": "${localEnv:DISPLAY}"
    },
    // Add the URLs of features you want added when the container is built.
    "features": {
        "ghcr.io/devcontainers/features/common-utils:1": {
            "username": "none",
            "upgradePackages": false
        }
    },
    "customizations": {
        "vscode": {
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "golang.go",
                "eamodio.gitlens", // IDE Git information
                "davidanson.vscode-markdownlint",
                "ms-azuretools.vscode-docker", // Docker integration and linting
                "shardulm94.trailing-spaces", // Show trailing spaces
                "Gruntfuggly.todo-tree", // Highlights TODO comments
                "bierner.emojisense", // Emoji sense for markdown
                "stkb.rewrap", // rewrap comments after n characters on one line
                "vscode-icons-team.vscode-icons", // Better file extension icons
                "github.vscode-pull-request-github", // Github interaction
                "redhat.vscode-yaml", // Kubernetes, Drone syntax highlighting
                "bajdzis.vscode-database", // Supports connections to mysql or postgres, over SSL, socked
                "IBM.output-colorizer", // Colorize your output/test logs
                "github.copilot" // AI code completion
                // "mohsen1.prettify-json", // Prettify JSON data
                // "zxh404.vscode-proto3", // Supports Proto syntax
                // "jrebocho.vscode-random", // Generates random values
                // "alefragnani.Bookmarks", // Manage bookmarks
                // "quicktype.quicktype", // Paste JSON as code
                // "spikespaz.vscode-smoothtype", // smooth cursor animation
            ]
        }
    },
    // Make sure the files we are mapping into the container exist on the host
    "initializeCommand": "bash -c 'for i in $HOME/.inputrc; do [ -f $i ] || touch $i; done'",
    "runArgs": [
        "--net=host",
        "--security-opt=label=type:container_runtime_t"
    ],
    "mounts": [
        "source=${localEnv:HOME}/.ssh,target=/root/.ssh,type=bind",
        "source=${localEnv:HOME}/.inputrc,target=/root/.inputrc,type=bind",
        // map in home directory - not strictly necessary but useful
        "source=${localEnv:HOME},target=${localEnv:HOME},type=bind,consistency=cached"
    ],
    // make the workspace folder the same inside and outside of the container
    "workspaceMount": "source=${localWorkspaceFolder},target=${localWorkspaceFolder},type=bind",
    "workspaceFolder": "${localWorkspaceFolder}",
    "postCreateCommand": "bash"
}